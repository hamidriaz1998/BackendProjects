"""Initial migration

Revision ID: 73c6060fe4a8
Revises:
Create Date: 2025-07-02 10:57:26.002672

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "73c6060fe4a8"
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "users",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("email", sa.String(length=255), nullable=False),
        sa.Column("username", sa.String(length=255), nullable=False),
        sa.Column("password", sa.String(length=255), nullable=False),
        sa.Column("max_ttl_minutes", sa.Integer(), nullable=False, default=60),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
        sa.UniqueConstraint("username"),
    )
    op.create_table(
        "urls",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("original_url", sa.String(length=255), nullable=False),
        sa.Column("short_url", sa.String(length=255), nullable=False, index=True),
        sa.Column("click_count", sa.Integer(), nullable=False),
        sa.Column("last_visited", sa.DateTime(timezone=True), nullable=True),
        sa.Column("created_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("updated_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("expires_at", sa.DateTime(timezone=True), nullable=True),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("short_url"),
    )

    get_url_func = """
    CREATE OR REPLACE FUNCTION get_url_by_short_code_and_update(
        short_code VARCHAR(255)
    )
    RETURNS VARCHAR(255)
    AS $$
    DECLARE
        url VARCHAR(255);
        url_id INTEGER;
        expires_at_v TIMESTAMP;
    BEGIN
        -- Try to find URL without filtering by expiry
        SELECT id, original_url, expires_at
        INTO url_id, url, expires_at_v
        FROM urls
        WHERE short_url = short_code;
    
        -- Not found at all
        IF url IS NULL THEN
            RETURN 'url not found';
        END IF;
    
        -- Found but expired
        IF expires_at_v IS NOT NULL AND expires_at_v <= NOW() THEN
            RETURN 'url has expired';
        END IF;
    
        -- Valid â€” update stats
        UPDATE urls
        SET
            last_visited = NOW(),
            click_count = COALESCE(click_count, 0) + 1
        WHERE id = url_id;
    
        RETURN url;
    END;
    $$ LANGUAGE plpgsql;
    """
    op.execute(get_url_func)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("urls")
    op.drop_table("users")

    drop_func = """
        DROP FUNCTION IF EXISTS get_url_by_short_code_and_update(VARCHAR(255));
        """
    op.execute(drop_func)
    # ### end Alembic commands ###
